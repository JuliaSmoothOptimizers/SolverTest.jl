var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"References","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"​","category":"page"},{"location":"reference/#Contents","page":"References","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"​","category":"page"},{"location":"reference/","page":"References","title":"References","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"References","title":"References","text":"​","category":"page"},{"location":"reference/#Index","page":"References","title":"Index","text":"","category":"section"},{"location":"reference/","page":"References","title":"References","text":"​","category":"page"},{"location":"reference/","page":"References","title":"References","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"References","title":"References","text":"​","category":"page"},{"location":"reference/","page":"References","title":"References","text":"Modules = [SolverTest]","category":"page"},{"location":"reference/#SolverTest.bound_constrained_nlp-Tuple{Any}","page":"References","title":"SolverTest.bound_constrained_nlp","text":"bound_constrained_nlp(solver; problem_set = bound_constrained_nlp_set(), atol = 1e-6, rtol = 1e-6)\n\nTest the solver on bound-constrained problems. If rtol is non-zero, the relative error uses the gradient at the initial guess.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverTest.bound_constrained_nls-Tuple{Any}","page":"References","title":"SolverTest.bound_constrained_nls","text":"bound_constrained_nls(solver; problem_set = bound_constrained_nls_set(), atol = 1e-6, rtol = 1e-6)\n\nTest the solver on bound-constrained nonlinear least-squares problems. If rtol is non-zero, the relative error uses the gradient at the initial guess.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverTest.equality_constrained_nlp-Tuple{Any}","page":"References","title":"SolverTest.equality_constrained_nlp","text":"equality_constrained_nlp(solver; problem_set = equality_constrained_nlp_set(), atol = 1e-6, rtol = 1e-6)\n\nTest the solver on equality-constrained problems. If rtol is non-zero, the relative error uses the gradient at the initial guess.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverTest.equality_constrained_nls-Tuple{Any}","page":"References","title":"SolverTest.equality_constrained_nls","text":"equality_constrained_nls(solver; problem_set = equality_constrained_nls_set(), atol = 1e-6, rtol = 1e-6)\n\nTest the solver on equality-constrained problems. If rtol is non-zero, the relative error uses the gradient at the initial guess.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverTest.kkt_checker-Union{Tuple{S}, Tuple{T}, Tuple{NLPModels.AbstractNLPModel{T, S}, Any}} where {T, S}","page":"References","title":"SolverTest.kkt_checker","text":"kkt_checker(nlp, sol; kwargs...)\n\nGiven an NLPModels nlp and a vector sol, it returns the KKT residual of an optimization problem as a tuple (primal, dual). In particular, it uses ripqp to solve the following quadratic optimization problem with linear constraints\n\nmin_{d} ∇f(sol)ᵀd +  ½∥d∥²\n        lvar ≤ sol + d ≤ uvar\n        lcon ≤ c(sol) + ∇c(sol)d ≤ ucon\n\nThe solution of this problem is the gradient of the Lagrangian of the nlp at sol thanks to the ½ ‖d‖² term in the objective.\n\nKeyword arguments are passed to RipQP.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverTest.multiprecision_nlp-Tuple{Any, Any}","page":"References","title":"SolverTest.multiprecision_nlp","text":"multiprecision_nlp(solver, problem_type; precisions=[Float16, …, BigFloat])\n\nTest that solver solves a problem of type problem_type on various precisions. The problem_type can be\n\n:unc\n:bnd\n:equ\n:ineq\n:eqnbnd\n:gen\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverTest.multiprecision_nls-Tuple{Any, Any}","page":"References","title":"SolverTest.multiprecision_nls","text":"multiprecision_nls(solver, problem_type; precisions=[Float16, …, BigFloat])\n\nTest that solver solves a problem of type problem_type on various precisions. The problem_type can be\n\n:unc\n:bnd\n:equ\n:ineq\n:eqnbnd\n:gen\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverTest.unconstrained_nlp-Tuple{Any}","page":"References","title":"SolverTest.unconstrained_nlp","text":"unconstrained_nlp(solver; problem_set = unconstrained_nlp_set(), atol = 1e-6, rtol = 1e-6)\n\nTest the solver on unconstrained problems. If rtol is non-zero, the relative error uses the gradient at the initial guess.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SolverTest.unconstrained_nls-Tuple{Any}","page":"References","title":"SolverTest.unconstrained_nls","text":"unconstrained_nls(solver; problem_set = unconstrained_nls_set(), atol = 1e-6, rtol = 1e-6)\n\nTest the solver on unconstrained nonlinear least-squares problems. If rtol is non-zero, the relative error uses the gradient at the initial guess.\n\n\n\n\n\n","category":"method"},{"location":"#SolverTest","page":"Home","title":"SolverTest","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SolverTest package provides testing facilities for developers of JSO-compliant solvers.","category":"page"},{"location":"#How-to-cite","page":"Home","title":"How to cite","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please cite this repository if you use SolverTest.jl in your work: see CITATION.cff.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SolverTest Julia Language package. To install SolverTest, please open Julia's interactive session (known as REPL) and press the ] key in the REPL to use the package mode, then type the following command","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add SolverTest","category":"page"},{"location":"#Bug-reports-and-discussions","page":"Home","title":"Bug reports and discussions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you want to ask a question not suited for a bug report, feel free to start a discussion here. This forum is for general discussion about this repository and the JuliaSmoothOptimizers, so questions about any of our packages are welcome.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The package SolverTest provides a set a functions to test the basic features of a JSO-compliant solver.  It is assumed that:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"the tested solver accepts an AbstractNLPModel as input, and;\nreturns a GenericExecutionStats as output;\nThe solver function should accepts atol and rtol as keyword arguments.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"As shown in the examples below, the package also provide multiprecision tests for compatible solvers.","category":"page"},{"location":"tutorial/#Unconstrained-Optimization","page":"Tutorial","title":"Unconstrained Optimization","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The function unconstrained_nlp_set  returns a list of optimization problems in the ADNLPModel format.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Secondly, the function unconstrained_nlp will test the behavior of the JSO-compliant function solver on the test set. More precisely, it will test that primal and dual feasibility at the solution (stats.solution) computed with kkt_checker and that stats.dual_feas are relatively small, i.e. ‖∇f(xᵏ)‖ ≤ atol + rtol * ‖∇f(x⁰)‖ where atol = rtol = 1e-6. It will also be tested that the final status stats.status is :first_order. The problems are sufficiently simple that we expect the solver to solve them successfully.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using SolverTest\nusing Test\nusing JSOSolvers # export solver trunk\n@testset \"Unconstrained solvers\" begin\n  unconstrained_nlp(trunk)\n  multiprecision_nlp(trunk, :unc)\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Similarly, unconstrained_nls_set and unconstrained_nls are preparing the same tests for nonlinear least squares.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using SolverTest\nusing Test\nusing JSOSolvers # export solver trunk\n@testset \"Unconstrained solvers\" begin\n  unconstrained_nls(trunk)\n  multiprecision_nls(trunk, :unc)\nend","category":"page"},{"location":"tutorial/#Bound-constrained-Optimization","page":"Tutorial","title":"Bound-constrained Optimization","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The function bound_constrained_nlp_set  returns a list of optimization problems in the ADNLPModel format.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Secondly, the function bound_constrained_nlp will test the behavior of the JSO-compliant function solver on the test set. More precisely, it will test that primal and dual feasibility at the solution (stats.solution) computed with kkt_checker and that stats.primal_feas and stats.dual_feas are relatively small, i.e. smaller than atol + rtol * ‖∇f(x⁰)‖ where atol = rtol = 1e-6. It will also be tested that the final status stats.status is :first_order. The problems are sufficiently simple that we expect the solver to solve them successfully.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using SolverTest\nusing Test\nusing JSOSolvers # export solver trunk\n@testset \"Bound-constrained solvers\" begin\n  bound_constrained_nlp(tron)\n  multiprecision_nlp(tron, :unc)\n  multiprecision_nlp(tron, :bnd)\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Similarly, bound_constrained_nls_set and bound_constrained_nls are preparing the same tests for nonlinear least squares.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using SolverTest\nusing Test\nusing JSOSolvers # export solver trunk\n@testset \"Bound-constrained solvers\" begin\n  bound_constrained_nls(tron)\n  multiprecision_nls(tron, :unc)\n  multiprecision_nls(tron, :bnd)\nend","category":"page"},{"location":"tutorial/#Equality-constrained-Optimization","page":"Tutorial","title":"Equality-constrained Optimization","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This expands straightforwardly to equality-constrained problems.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using SolverTest\nusing Test\nusing DCISolver # export solver dci\n@testset \"Testing DCI-solver\" begin\n\n  @testset \"$foo\" for foo in [\n    unconstrained_nlp,\n    equality_constrained_nlp,\n  ]\n    foo(dci)\n  end\n\n  @testset \"Multiprecision tests\" begin\n    for ptype in [:unc, :equ]\n      multiprecision_nlp(\n        dci,\n        ptype,\n        precisions = (Float32, Float64),\n      )\n    end\n  end\nend","category":"page"},{"location":"tutorial/#Bound-and-Equality-constrained-Optimization","page":"Tutorial","title":"Bound and Equality-constrained Optimization","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This is still work in progress, see Issue 8.","category":"page"},{"location":"tutorial/#Inequality-constrained-optimization","page":"Tutorial","title":"Inequality-constrained optimization","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This is still work in progress, see Issue 8.","category":"page"}]
}
